trigger:
  - main

variables:
  VM_USERNAME: '$(vmUsername)'        # Set this in Azure DevOps
  VM_PASSWORD: '$(vmPassword)'        # Set this in Azure DevOps
  VM_IP: '$(vmIp)'                   # Set this in Azure DevOps
  COMMIT_ID: '$(Build.SourceVersion)'

stages:
- stage: Build
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'dockerhub-connection'
        command: 'login'
        
    - script: |
        # Build and push backend
        cd backend
        docker build -t $(DOCKER_REGISTRY_USERNAME)/backend:$(COMMIT_ID) .
        docker push $(DOCKER_REGISTRY_USERNAME)/backend:$(COMMIT_ID)
        
        # Build and push frontend
        cd ../frontend
        docker build -t $(DOCKER_REGISTRY_USERNAME)/frontend:$(COMMIT_ID) .
        docker push $(DOCKER_REGISTRY_USERNAME)/frontend:$(COMMIT_ID)
      displayName: 'Build and Push Docker Images'

    - script: |
        # Update docker-compose.yaml with new image tags
        sed -i "s|build: .*|image: $(DOCKER_REGISTRY_USERNAME)/backend:$(COMMIT_ID)|g" docker-compose.yaml
        sed -i "s|build: .*|image: $(DOCKER_REGISTRY_USERNAME)/frontend:$(COMMIT_ID)|g" docker-compose.yaml
        
        # Commit and push changes
        git config --global user.email "subhamid007@gmail.com"
        git config --global user.name "SubhAMmmm"
        git add docker-compose.yaml
        git commit -m "Update image tags to $(COMMIT_ID)"
        git push
      displayName: 'Update Docker Compose File'

- stage: Deploy
  jobs:
  - job: DeployToVM
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        # Install sshpass if not already installed
        sudo apt-get update
        sudo apt-get install -y sshpass
        
        # Copy docker-compose file to VM
        sshpass -p "$(VM_PASSWORD)" scp -o StrictHostKeyChecking=no docker-compose.yaml $(VM_USERNAME)@$(VM_IP):~/
        
        # Execute deployment commands on VM
        sshpass -p "$(VM_PASSWORD)" ssh -o StrictHostKeyChecking=no $(VM_USERNAME)@$(VM_IP) '
          # Login to Docker Hub using the service connection credentials
          docker login -u $(DOCKER_REGISTRY_USERNAME) -p $(DOCKER_REGISTRY_PASSWORD)
          
          # Pull new images and deploy
          docker-compose pull
          docker-compose down
          docker-compose up -d
        '
      displayName: 'Deploy to VM'